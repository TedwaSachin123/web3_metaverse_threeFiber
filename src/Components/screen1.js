/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from 'react'
import { useGLTF, Html } from '@react-three/drei'
import "bulma/css/bulma.css";
import { ethers } from 'ethers';
import { useState, useEffect } from 'react';

export default function Displayscreen({ ...props }) {
  const [buyqty, setbuyqty] = useState("");
  const [mydonutcount,getmyqtycount] = useState("");
  const [signedcontract,setcontract] = useState("")
  const [address,setAddress] = useState(null);
  const [inventory,getinventory] = useState("");
  const [error,seterror] = useState("");
  const [success, setsuccess] = useState("");
  const [load, setLoadingScreen] = useState("");
 

  useEffect(()=>{
    if(address == null)Signerhandler()
    if(signedcontract) getinventoryhandler()
    if(signedcontract && address) getmydonutcounthandler()
    
        
},[signedcontract, address]);


//signerhandler
  const Signerhandler = async()=>{
    
    if(typeof window !== "undefined" && typeof window.ethereum !=="undefined" ){
      try {
    const useraddress = await window.ethereum.request({method:"eth_requestAccounts"})
    setAddress(useraddress[0])
    const contractAddress = "0x3Be769353B5B7052380C2C71229B6C2467a40608";
    const abi = [
      { inputs: [], stateMutability: "nonpayable", type: "constructor" },
      {
        inputs: [{ internalType: "address", name: "", type: "address" }],
        name: "donutbalance",
        outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
        stateMutability: "view",
        type: "function",
      },
      {
        inputs: [],
        name: "owner",
        outputs: [{ internalType: "address", name: "", type: "address" }],
        stateMutability: "view",
        type: "function",
      },
      {
        inputs: [],
        name: "getvendingmachinebalance",
        outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
        stateMutability: "view",
        type: "function",
      },
      {
        inputs: [{ internalType: "uint256", name: "amt", type: "uint256" }],
        name: "restock",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
      },
      {
        inputs: [{ internalType: "uint256", name: "amt", type: "uint256" }],
        name: "purchase",
        outputs: [],
        stateMutability: "payable",
        type: "function",
      },
    ];
    
    const provider = new ethers.providers.Web3Provider(window.ethereum);
    const newSigner = provider.getSigner();
    
    const contract = new ethers.Contract(contractAddress, abi, newSigner);
    setcontract(contract);
  }
  catch(err){
    seterror(err.message);
  }
} else{
  alert('please install metamask')
}
  }
  
//get vending machine inventory
const getinventoryhandler = async()=>{
   
  const count = await signedcontract.getvendingmachinebalance();
  getinventory(count)
  }

//get my donut
const getmydonutcounthandler = async()=>{
        
    const count = await signedcontract.donutbalance(address.toString());
    getmyqtycount(count)
}

//target input value of buying qty
const  updatedonutquantity = async(event)=>{
  setbuyqty(event.target.value)
    
} 

//buy handler
  const Buyhandler = async () => {
    seterror("")
        setsuccess('')
    try{setLoadingScreen('Transaction Pending !!');
    await signedcontract.purchase(buyqty, {
      value: ethers.utils.parseEther((2*buyqty).toString())
    })
    setLoadingScreen('')
    setsuccess('donut purchase !!')
    seterror('')
    getinventoryhandler()
    getmydonutcounthandler()
    setbuyqty("")
        } catch(err){
            seterror(err.message)
            setLoadingScreen("")
        }
  };



  const group = useRef()
  const { nodes, materials } = useGLTF('/displayscreen.glb')
  return (
    <group ref={group} {...props} dispose={null}>
      <group position={[0, -0.04, 0.41]} rotation={[0.01, 0, 0]}>
        
        <group position={[0, 2.96, -0.13]} rotation={[Math.PI / 2, 0, 0]}>
          <mesh castShadow receiveShadow geometry={nodes.Cube008.geometry} material={materials.aluminium} />
          <mesh castShadow receiveShadow geometry={nodes.Cube008_1.geometry} material={materials['matte.001']} />
          <Html className="content" rotation-x={-Math.PI / 2} position={[0, 0.05, -0.09]} transform occlude>
          <div className="wrapper">
          <nav className="navbar mt-4 mb-4">
            <div className='container'>
                <div className='navbar-brand'>
                    <h1>Vending Machine</h1>
                </div>
            </div>
          </nav>
          <section>
            <div className='container'>
              <p>Vending Machine Inventory: </p>
                <input value={inventory}></input>
            </div>
        </section>
        <section>
            <div className='container'>
            <p>My Donut: </p>
            <input value={mydonutcount}></input>
                
            </div>
        </section>
        <section className='mt-5'>
            <div className='container'>
                <div className='field'>
                    <label className='label'>Buy Donut</label>
                    <div className='control'>
                        <input value={buyqty} onChange={updatedonutquantity} className='input' type="number" placeholder='enter amount'></input>
                    </div>
                    <button onClick={Buyhandler} className='button is-primary mt-2'>Buy </button>
                    </div>
            </div>
        </section>
        <section>
            <div className='container has-text-danger'>
                <p>{error}</p>
            </div>
        </section>
        <section>
            <div className='container has-text-success'>
                <p>{success}</p>
            </div>
        </section>
        <section>
            <div className='container has-text'>
                <p>{load}</p>
            </div>
        </section>
            
        </div>
            
          </Html>
            
        </group>
      </group>
      
    </group>
  )
}

useGLTF.preload('/displayscreen.glb')
